// Time Complexity : O(V+E) =O(n^2)
// Space Complexity : O(n)
// Did this code successfully run on Leetcode : Yes
// Any problem you faced while coding this : No
class Solution {
    public int minMalwareSpread(int[][] graph, int[] initial) {
        int n = graph.length;
        
        int[] grouping = new int[graph.length];
        
        
        int group = 0;
        //Shows node is not visited
        for(int i = 0; i < n ; i++){
            grouping[i] = -1;
        }
        
        for(int i =0; i < n; i++){
            if(grouping[i] == -1){
                dfs(group, grouping, graph, i);
                group +=1;
            }
            
        }
        int[] groups = new int[group];
        int[] infected = new int[group];
         
        for(int i =0; i < n; i++){
            groups[grouping[i]]++;
        }
        for(int i =0; i < initial.length; i++){
            infected[grouping[initial[i]]]++;
        }
        int minIndex = n;
        int maxSaved = 0;
        
        for(int i = 0; i < initial.length; i++){
            int node = initial[i];
            int grp = grouping[node];
            // only one node is affected in the group
            if(infected[grp] == 1){
                int currSaved = groups[grp]-1;
                if(currSaved == maxSaved){
                    minIndex = Math.min(minIndex, node);
                }
                else if(currSaved > maxSaved){
                    maxSaved = currSaved;
                    minIndex = node;
                }
            }
        }
            if(minIndex == n){
                for(int i = 0; i < initial.length; i++){
                    minIndex = Math.min(minIndex, initial[i]);
                }
            }
        
        return minIndex;
    }
        private void dfs(int group, int[] grouping, int[][] graph, int i){
            //base
            if(grouping[i] != -1){
                return;   
            }
            //logic
            grouping[i] = group;
            for(int j = 0; j < graph.length; j++){
                if(graph[i][j] == 1){
                    dfs(group, grouping, graph, j);
                }
            }
        }
    }
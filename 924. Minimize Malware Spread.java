class Solution {// Time of O(V^2) and space of O(V) where V is vertex
    public int minMalwareSpread(int[][] graph, int[] initial) {
        
        int N = graph.length;
        int[] colors = new int[N];
        Arrays.fill(colors,-1);
        int C = 0;
        //1. color each component
        for(int node = 0 ; node<N ; node ++){
            if(colors[node]== -1){
                dfs(graph,colors,node,C);
                C++;
            }
        }
        //2. size of each component
        int[] size = new int[C];
        for(int color:colors){
            size[color]++;
        }
        //3. Count infected nodes in each component;
        int[] colorCount = new int[C];
        for(int node:initial){
            colorCount[colors[node]]++;
        }
        //4.Find the solution
        int ans = Integer.MAX_VALUE;
        
        for(int node:initial){
            int c = colors[node];
            if(colorCount[c] == 1){
                if(ans == Integer.MAX_VALUE){
                    ans = node;
                }else if(size[c] >size[colors[ans]]){
                    ans = node;
                }else if(size[c]==size[colors[ans]] && node<ans){
                    ans = node;
                }
            }
        }
        // if all infected node in one branch
        if(ans == Integer.MAX_VALUE){
            for(int node:initial){
                ans = Math.min(ans,node);
            }
        }
        return ans;
    }
    public void dfs(int[][] graph, int[] colors , int node , int color ){
        colors[node] = color;
        for(int neighbour=0 ; neighbour<graph.length; neighbour++){
           if(graph[node][neighbour] == 1 && colors[neighbour] == -1){
               dfs(graph,colors,neighbour,color);
           } 
        }
        
    }
}
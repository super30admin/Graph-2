# Time Complexity : O(n ^ 2) [n = number of nodes in graph]
# Space Complexity : O(n + c) [n = number of nodes in graph, c = number of distinct colors]
# Did this code successfully run on Leetcode : Yes
# Any problem you faced while coding this : No
class Solution:
    def minMalwareSpread(self, graph: List[List[int]], initial: List[int]) -> int:
        
        def dfs(node, color):
            nonlocal colors
            ## body
            colors[node] = color
            for i in range(n):
                if graph[node][i] == 1 and colors[i] == -1:
                    dfs(i, color)
        
        n = len(graph)
        
        ## enumerate each disconnected component in graph with different color
        colors = [-1  for _ in range(n)]
        color = 0
        for i in range(n):
            if colors[i] == -1:
                dfs(i, color)
                color+=1
        
        ## find the indegree of each node
        
        groups = [0 for _ in range(color)]
        
        for node in colors:
            groups[node]+=1
            
            
        ## find the malware count for each group(disconnected component)
        
        malware_group_count = [0 for _ in range(color)]
        
        for node in initial:
            malware_group_count[colors[node]]+=1
            
        
        res = float('inf')
        for node in initial:
            color = colors[node]
            count = malware_group_count[color]
            
            if count == 1:
                if res == float('inf'):
                    res = node
                elif groups[colors[res]] < groups[colors[node]]:
                    res = node
                elif groups[colors[res]] == groups[colors[node]] and node < res:
                    res = node
        
        if res == float('inf'):
            res = min(initial)
            
        return res
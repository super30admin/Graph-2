// Time complexity is O(M*N)
// Space complexity is O(N)
// This solution is submitted on leetcode

import java.util.Arrays;

public class BigN157MinimizeMalwareSpread {
	class Solution {
		int[] colors;
		int n;

		public int minMalwareSpread(int[][] graph, int[] initial) {
			n = graph.length;
			colors = new int[n];
			Arrays.fill(colors, -1);
			int c = 0;
			for (int i = 0; i < n; i++) {
				dfs(i, c, graph);
				c++;
			}

			int[] group = new int[c];
			for (int i = 0; i < n; i++) {
				group[colors[i]]++; 
			}

			int[] infectedNode = new int[c];
			for (int node : initial) {
				infectedNode[colors[node]]++;
			}
			int result = Integer.MAX_VALUE;
			for (int node : initial) {
				int col = colors[node];
				int count = infectedNode[col];
				if (count == 1) {
					if (result == Integer.MAX_VALUE)
						result = node;
					else if (group[col] > group[colors[result]])
						result = node;
					else if (group[col] == group[colors[result]] && node < result)
						result = node;
				}
			}
			if (result == Integer.MAX_VALUE) {
				for (int node : initial) {
					result = Math.min(result, node);
				}
			}
			return result;
		}

		private void dfs(int node, int c, int[][] graph) {
			// base
			if (colors[node] != -1)
				return;
			// logic
			colors[node] = c;
			for (int i = 0; i < n; i++) {
				int edge = graph[node][i];
				if (edge == 1)
					dfs(i, c, graph);
			}
		}
	}
}
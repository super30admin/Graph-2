# Time Complexity : ON^2)
# Space Complexity : O(N)
# Did this code successfully run on Leetcode : Yes
# Any problem you faced while coding this : No
class Solution:
    def minMalwareSpread(self, graph: List[List[int]], initial: List[int]) -> int:
        n = len(graph)
        colors = {}
        c = 0
        
        def dfs(node, color):
            # set node color in colors dict
            colors[node] = color
            # iterate over neighbors
            for nei, adj in enumerate(graph[node]):
                if adj and nei not in colors:
                    dfs(nei, color)
        
        for node in range(n):
            if node not in colors:
                dfs(node, c)
                c += 1
        
        size = Counter(colors.values())
        
        color_count = Counter()
        
        for node in initial:
            color_count[colors[node]] += 1
            
        ans = float("inf")
        
        for i in initial:
            c = colors[i]
            if color_count[c] == 1:
                if ans == float("inf"):
                    ans = i
                elif size[c] > size[colors[ans]]:
                    ans = i
                elif size[c] == size[colors[ans]] and i < ans:
                    ans = i
        return ans if ans < float('inf') else min(initial)
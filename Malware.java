class Malware {

// Time Complexity : O(N^2) where N is number of nodes in the graph
// Space Complexity : O(N)
// Did this code successfully run on Leetcode : Yes
// Any problem you faced while coding this : No


// Your code here along with comments explaining your approach
/**
 * 1. Assign color code to connected part of the graph and as per the color code count the number of
 * nodes in each graph.
 * 2. For affected nodes in initital, count the number of affected nodes per color code.
 * 3. At the end for every unique color code, find the node which has lowest number of affected nodes
 * as per its color code
 */
    
    public int minMalwareSpread(int[][] graph, int[] initial) {
        
        int n = graph.length;
        int[] colors = new int[n];
        Arrays.fill(colors, -1);
        int count = 0;
        for(int i = 0; i<n; i++){
            dfs(colors, graph, i, count);
            count++;
        }
        
        int[] groups = new int[count];
        
        for(int c: colors){
            groups[c]++;
        }
        
        int[] initGroup = new int[count];
        for(int i : initial) {
            initGroup[colors[i]]++;
        }
        
        int result = Integer.MAX_VALUE;
        
        for(int i: initial){
            int color = colors[i];
            int initCount = initGroup[color];
            
            if(initCount == 1){
                if(result == Integer.MAX_VALUE){
                    result = i;
                }
                else if(groups[colors[i]] > groups[colors[result]]){
                    result = i;
                }
                else if(groups[colors[i]] == groups[colors[result]] && result > i){
                    result = i;
                }
            }
            
        }
        
        if(result == Integer.MAX_VALUE){
            for(int i: initial){
                result = Math.min(result, i);
            }
        }
        
        return result;
        
    }
    
    private void dfs(int[] colors, int[][] graph, int node, int count) {
        
        if(colors[node] != -1){
            return;
        }
        
        int n = colors.length;
        colors[node] = count;
        for(int j=0; j<n; j++) {
            if(graph[node][j] == 1){
                dfs(colors, graph, j, count);
            }
        }
        
    }
}
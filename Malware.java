//Time- O(n^2)
//Space - O(n)
class Solution {
    public int minMalwareSpread(int[][] graph, int[] initial) {
        int n = graph.length;
        int[] colors = new int[n];
        Arrays.fill(colors,-1);
        int c=0;
        for(int i=0; i<colors.length; i++){
            if(colors[i]==-1){
                dfs(graph, colors, i, c);
                c++;
            }
        }
        int[] groups = new int[c];
        for(int i=0; i<colors.length; i++){
            int grpIdx = colors[i];
            groups[grpIdx]++;
        }

        int[] initGroups = new int[c];
        for(int i : initial){
            initGroups[colors[i]]++;
        }


        int remove_node = Integer.MAX_VALUE;
        for( int i :initial){
            if(initGroups[colors[i]] == 1){
                if(remove_node == Integer.MAX_VALUE){
                    remove_node = i;
                }else if(groups[colors[i]] > groups[colors[remove_node]]){
                    remove_node =i;
                } else if(groups[colors[i]] == groups[colors[remove_node]] && i < remove_node){
                    remove_node= i;
                }
            }
        }
        if(remove_node == Integer.MAX_VALUE){
            for(int i: initial){
                remove_node = Math.min(remove_node,i);
            }
        }
    return remove_node;
    }

    void dfs(int[][] graph, int[] colors, int i, int c){
        if(colors[i]!=-1) return;
        colors[i] =c;
        for(int j=0; j< graph.length; j++){
            if(graph[i][j] == 1){
                dfs(graph, colors, j, c);
            }
        }
    }
}
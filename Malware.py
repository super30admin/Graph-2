# Time Complexity: O(n^2)
# Space Complexity: O(n)
class Solution:
    def minMalwareSpread(self, graph: List[List[int]], initial: List[int]) -> int:

        nodes = len(graph)
        visited = [False for i in range(nodes)]
        conComp = [list() for i in range(nodes)]
        malPerComp = [0 for i in range(nodes)]

        totalCon = 0

        def dfs(node, graph, visited, idx, conComp, initial):
            visited[node] = True
            conComp[idx].append(node)

            if node in initial:
                malPerComp[idx] += 1

            for childIdx in range(nodes):
                if childIdx != node and graph[node][childIdx] == 1 and not visited[childIdx]:
                    dfs(childIdx, graph, visited, idx, conComp, initial)

        for idx in range(nodes):
            if not visited[idx]:
                dfs(idx, graph, visited, totalCon, conComp, initial)
                totalCon += 1

        # print(conComp)
        # print(malPerComp)

        minm = None
        minIdx = None

        for idx in range(totalCon):
            if malPerComp[idx] == 0:
                continue
            if minm == None:
                minm = malPerComp[idx]
                minIdx = idx
                continue
            # print(idx, malPerComp[idx], minm, len(conComp[idx]))
            if malPerComp[idx] < minm:
                minm = malPerComp[idx]
                minIdx = idx
            elif malPerComp[idx] == minm and len(conComp[idx]) > len(conComp[minIdx]):
                minIdx = idx
            elif malPerComp[idx] == minm and len(conComp[idx]) == len(conComp[minIdx]):
                mina = None
                for node in conComp[minIdx]:
                    if node in initial:
                        mina = node
                        break
                for node in conComp[idx]:
                    if node in initial:
                        if node < mina:
                            minIdx = idx
                            break

        if minm != 1:
            return sorted(initial)[0]

        for node in conComp[minIdx]:
            if node in initial:
                return node

        return -1
// Time Complexity : O(N^2)
// Space Complexity : O(N)
// Did this code successfully run on Leetcode : Yes
// Any problem you faced while coding this :


// Your code here along with comments explaining your approach
class Solution {
    
    public int minMalwareSpread(int[][] graph, int[] initial) {
        if(graph == null || graph.length == 0) return -1;
        
        int n =graph.length;
        
        int[] colors = new int[n];
        
        int color = 0;
        Arrays.fill(colors,-1);
        for(int i = 0 ; i < n ; i++){
            if(colors[i] == -1){
                dfs(graph,color,colors,n,i);
                color++;
            }  
        }
        for(int x : colors) System.out.println(x);
        int[] groups = new int[color];
        for(int i = 0 ; i < n ; i++){
            groups[colors[i]]++;
        }
        int[] infected = new int[color];
        for(int node : initial){
            infected[colors[node]]++;
        }
        int result = Integer.MAX_VALUE;
        for(int node : initial){
            int colorNode = colors[node];
            int total = infected[colorNode];
            if(total == 1){
                if(result == Integer.MAX_VALUE){
                    result = node;
                } 
                else if(groups[colorNode] > groups[colors[result]]){
                    result = node;
                }
                else if(groups[colorNode]==groups[colors[result]] && node<result){
                result = node;
                }
            }
            
        }
        if(result == Integer.MAX_VALUE){
            for(int node : initial) result = Math.min(node,result);    
        }
        return result;
        
    }
    private void dfs(int [][] graph,int color,int[] colors,int n,int node){
         
        //base
        if(colors[node] != -1) return;
        //Logic
        
        colors[node] = color;
        for(int i = 0 ; i < n ; i++){
            if(node != i && graph[node][i] == 1){
                dfs(graph,color,colors,n,i);
            }
        }
    }
}

// Time Complexity : O(n^2)
// Space Complexity : O(n)
// Did this code successfully run on Leetcode : yes
// Any problem you faced while coding this : no

// Approach

// We use dfs to solve this
// we get differentiate the nodes into colors using dfs
// Then we calculate the infected and group the nodes
// we will then calucalate the minimum spread

class Solution {
    int n;
    int[] colors;

    public int minMalwareSpread(int[][] graph, int[] initial) {
        if (graph == null || graph.length == 0)
            return 0;
        n = graph.length;
        colors = new int[n];
        Arrays.fill(colors, -1);
        int cl = 0;

        for (int i = 0; i < n; i++) {
            if (colors[i] == -1) {
                dfs(i, graph, cl);
                cl++;
            }
        }
        int[] groups = new int[cl];
        for (int i = 0; i < n; i++) {
            int color = colors[i];
            groups[color]++;
        }

        int[] infected = new int[cl];
        for (int i = 0; i < initial.length; i++) {
            int color = colors[initial[i]];
            infected[color]++;
        }
        int result = Integer.MAX_VALUE;
        for (int i = 0; i < initial.length; i++) {
            int color = colors[initial[i]];
            int totalInfected = infected[color];
            if (totalInfected == 1) {
                if (result == Integer.MAX_VALUE) {
                    result = initial[i];
                } else if (groups[color] > groups[colors[result]]) {
                    result = initial[i];
                } else if (groups[color] == groups[colors[result]] && initial[i] < result) {
                    result = initial[i];
                }
            }
        }
        if (result == Integer.MAX_VALUE) {
            for (int i = 0; i < initial.length; i++) {
                result = Math.min(result, initial[i]);
            }
        }
        return result;
    }

    private void dfs(int i, int[][] graph, int cl) {
        if (colors[i] != -1)
            return;

        colors[i] = cl;
        for (int j = 0; j < n; j++) {
            if (graph[i][j] == 1) {
                dfs(j, graph, cl);
            }
        }
    }
}
//Time Complexity: O(V * E)
//Space Complexity: O(V)

import java.util.Arrays;

public class MalwareSpread {
	int[] colors;
	int n;

	public int minMalwareSpread(int[][] graph, int[] initial) {
		n = graph.length;
		colors = new int[n];
		Arrays.fill(colors, -1);

		int c = 0;
		for (int i = 0; i < n; i++) {
			dfs(i, c, graph);
			c++;
		}
		int[] group = new int[c];
		for (int color : colors) {
			group[color]++;
		}

		int[] initColor = new int[c];
		for (int node : initial) {
			initColor[colors[node]]++;
		}
		int result = Integer.MAX_VALUE;
		for (int node : initial) {
			int color = colors[node];
			if (initColor[color] == 1) {
				if (result == Integer.MAX_VALUE)
					result = node;
				else if (group[color] > group[colors[result]])
					result = node;
				else if (group[color] == group[colors[result]] && node < result)
					result = node;
			}
		}
		if (result == Integer.MAX_VALUE) {
			for (int node : initial) {
				result = Math.min(result, node);
			}
		}
		return result;
	}

	private void dfs(int node, int color, int[][] graph) {
		if (colors[node] != -1)
			return;
		colors[node] = color;
		for (int i = 0; i < n; i++) {
			if (graph[node][i] == 1) {
				dfs(i, color, graph);
			}
		}
	}
}

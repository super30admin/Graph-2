Time Complexity = O(n*n)
Space Complexity = O(n)

class Solution {
    public int minMalwareSpread(int[][] graph, int[] initial) {
        int  n= graph.length;
        int[] colors = new int[n];
        Arrays.fill(colors, -1);
        int component = 0;

        for (int i = 0; i < n; i++)
            if (colors[i] == -1)
                dfs(graph, colors, i, component++);

        int[] size = new int[component];
        for (int color: colors)
            size[color]++;

        int[] colorCount = new int[component];
        for (int i: initial)
            colorCount[colors[i]]++;

        int result = Integer.MAX_VALUE;
        for (int i: initial) {
            int c = colors[i];
            if (colorCount[c] == 1) {
                if (result == Integer.MAX_VALUE)
                    result = i;
                else if (size[c] > size[colors[result]])
                    result = i;
                else if (size[c] == size[colors[result]] && i < result)
                    result = i;
            }
        }

        if (result == Integer.MAX_VALUE)
            for (int i: initial)
                result = Math.min(result, i);

        return result;
    }

    public void dfs(int[][] graph, int[] colors, int node, int color) {
        colors[node] = color;
        for (int neighbor = 0; neighbor < graph.length; neighbor++)
            if (graph[node][neighbor] == 1 && colors[neighbor] == -1)
                dfs(graph, colors, neighbor, color);
    }
 
    
}
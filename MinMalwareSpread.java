// Time Complexity : The time complexity is O(n2) where n is the number of nodes
// Space Complexity : The space complexity is O(n) where n is the number of nodes
// Did this code successfully run on Leetcode : Yes
// Any problem you faced while coding this : No

// Your code here along with comments explaining your approach

class Solution {

    int[] colors;
    int n;

    public int minMalwareSpread(int[][] graph, int[] initial) {

        n = graph.length;
        colors = new int[n];
        Arrays.fill(colors,-1);
        int c=0;

        //form clusters
        for(int i=0;i<n;i++){
            if(colors[i] == -1){
                dfs(i,graph,c);
                c++;
            }
        }

        //number of nodes in each cluster
        int[] groups = new int[c];
        for(int color:colors){
            groups[color]++;
        }

        //number of effected nodes in each cluster
        int[] infected = new int[c];
        int min = n+1;
        for(int each:initial){
            infected[colors[each]]++;
            min = Math.min(min,each);
        }

        int res = Integer.MAX_VALUE;
        //optimal removal of cluster
        for(int each:initial){
            if(infected[colors[each]] == 1){
                if(res == Integer.MAX_VALUE){
                    res = each;
                }
                else if(groups[colors[each]] > groups[colors[res]]){
                    res = each;
                }
                else if(groups[colors[each]] == groups[colors[res]] && each < res){
                    res = each;
                }
            }
        }

        if(res == Integer.MAX_VALUE){
            return min;
        }
        return res;
    }

    public void dfs(int idx,int[][] graph,int c){

        if(colors[idx] != -1){
            return;
        }

        colors[idx] = c;
        for(int i=0;i<n;i++){
            if(graph[idx][i] == 1){
                dfs(i,graph,c);
            }
        }
    }
}

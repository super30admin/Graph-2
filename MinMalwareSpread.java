class Solution {
    //tc-o(n^2)
    //sc-o(n)
     public int minMalwareSpread(int[][] graph, int[] initial) {
         if(graph == null || graph.length == 0 ) return 0;
         int n= graph.length;
    int[] colors = new int[n];
         Arrays.fill(colors,-1);
         int cl=0;
         for(int i=0;i<n;i++)
         {
             if(colors[i] == -1)
             {
                 dfs(graph,i,cl,colors);
             }
             cl++;
         }
         
         int[] groups = new int[cl];
         for(int i=0;i<n;i++)
         {
             int c =colors[i];
             groups[c]++;
         }
         
         int [] infected = new int[cl];
         for(int node: initial)
         {
             int c = colors[node];
             infected[c]++;
         }
 
         int result = Integer.MAX_VALUE;
         for(int node : initial)
         {
             int c = colors[node];
             int cnt = infected[c];
             if(cnt == 1)
             {
                 if(result == Integer.MAX_VALUE)
                 {
                     result = node;
                 } else if(groups[colors[result]] == groups[colors[node]] && node < result)
                 {
                     result = node;
                 }else if(groups[colors[result]] < groups[colors[node]])
                 {
                     result = node;
                 }
         }
         }
         if(result == Integer.MAX_VALUE)
         {
             for(int node: initial)
             {
                 result = Math.min(node,result);
             }
         }
 
      return result;
     
     }
 
     private void dfs(int[][] graph,int i,int cl,int[]colors)
     {
         //basecase
         if(colors[i] != -1) return;
 
         //logic
         colors[i] = cl;
         for(int j=0;j<graph[0].length;j++)
         {
             if(graph[i][j] == 1)
             {
                 dfs(graph,j,cl,colors);
             }
         }
     }
 
 }
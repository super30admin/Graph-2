class Solution:
    def minMalwareSpread(self, graph: List[List[int]], initial: List[int]) -> int:
        n = len(graph)
        u = UnionFind(n)
        for i in range(n):
            for j in range(n):
                if graph[i][j]:
                    u.union(i, j)
        mr = 0
        initial.sort()
        mi = initial[0]
        for i in range(len(initial)):
            cr = 0
            l = False
            for j in range(len(initial)):
                if i == j: continue
                if u.find(initial[i]) == u.find(initial[j]):
                    l = True
            if not l:
                cr = u.rank[u.find(initial[i])]
                if mr < cr:
                    mr = cr
                    mi = initial[i]
        return mi     
class UnionFind:
    def __init__(self, size):
        self.parent = {}
        self.rank = {}
        for i in range(size):
            self.parent[i] = i
            self.rank[i] = 1
    def find(self, x):
        if x != self.parent[x]:
            x = self.find(self.parent[x])
        return x
    def union(self, x, y):
        px, py = self.find(x), self.find(y)
        if px == py: return
        if self.rank[px] >= self.rank[py]:
            self.parent[py] = px
            self.rank[px] += self.rank[py]
        else:
            self.parent[px] = py
            self.rank[py] += self.rank[px]
    
# Time Complexity: O(n^2)
# Space Complexity: O(n)
# Successfully implemented on Leetcode

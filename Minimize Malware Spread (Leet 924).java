// Time Complexity :O(n^2) where n is no of nodes
// Space Complexity :O(n)

class Solution {
    public int minMalwareSpread(int[][] graph, int[] initial) {
        int n = graph.length;
        int [] colors = new int[n];
        Arrays.fill(colors, -1);
        int c = 0;
        for(int i=0; i<n; i++){
            if (colors[i] == -1){
                dfs(graph, colors, i, c);
                c++;
            }
        }
        
        int [] groups = new int[c];
        for(int i=0; i<n;i++){
            int grIdx = colors[i];
            groups[grIdx]++;
        }
        
        int [] initialGroups = new int[c];
        for(int node: initial){
            int color = colors[node];
            initialGroups[color]++;
        }
        
        int result = Integer.MAX_VALUE;
        int max = 0;
        for(int node: initial){
            int col = colors[node];
            int count = initialGroups[col];
            if (count == 1){
                if (result == Integer.MAX_VALUE){
                    result = node;
                }else if(groups[colors[node]] > groups[colors[result]]){
                    result = node;
                }else if(groups[colors[node]] == groups[colors[result]] && node < result){
                    result = node;
                }
            }
        }
        if(result == Integer.MAX_VALUE){
            for(int node: initial){
                result = Math.min(result, node);
            }
        }
        
        return result;
    }
    
    private void dfs(int [][] graph, int [] colors, int i, int c){
        // base
        if (colors[i] != -1){
            return;
        }
        // logic
        colors[i] = c;
        for(int j = 0; j < graph.length; j++){
            if(graph[i][j] == 1){
                dfs(graph, colors, j, c);
            }
        }
        
    }
    
    
    
}

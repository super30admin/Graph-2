class Solution:
    def minMalwareSpread(self, graph: List[List[int]], initial: List[int]) -> int:
        # Time O(n**2)
        # Space O(n)

        def dfs(node, col):
            # Base
            if colors[node] != -1: return
            # Logic
            colors[node] = col
            for j in range(n):
                if graph[node][j] == 1:
                    dfs(j, col)

        n = len(graph)
        colors = [-1 for i in range(n)]
        c = 0
        for i in range(n):
            if colors[i] == -1:
                dfs(i, c)
            c += 1

        # Groups arr
        groups = [0 for _ in range(c)]
        for i in range(n):
            groups[colors[i]] += 1

        # initial groups
        initgroup = [0 for _ in range(c)]
        for node in initial:
            cl = colors[node]
            initgroup[cl] += 1

        result = float('inf')
        for node in initial:
            cl = colors[node]
            if initgroup[cl] == 1:
                if result == float('inf'):
                    result = node
                elif groups[colors[result]] < groups[colors[node]]:
                    result = node
                elif groups[colors[result]] == groups[colors[node]] and node < result:
                    result = node

        if result == float('inf'):
            for node in initial:
                result = min(result, node)

        return result






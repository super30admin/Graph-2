using System;
using System.Collections.Generic;
using System.Text;

namespace DFS_And_BFS
{
    public class MinimizeMalwareSpread
    {
        /*
         * T.C : O(N2) where n is length of graph 
         * S.C: O(N) color array is max length of N
         * 
         */
        int n;
        int[] colors;
        public int MinMalwareSpread(int[][] graph, int[] initial)
        {
            if (graph == null || graph.Length == 0) return 0;

            n = graph.Length;
            colors = new int[n];
            Array.Fill(colors, -1);
            int c = 0;

            for (int i = 0; i < n; i++)
            {
                if (colors[i] == -1)
                {
                    dfs(graph, i, c);
                    c++;
                }
            }

            int[] groups = new int[c];

            for (int i = 0; i < n; i++)
            {
                int color = colors[i];
                groups[color]++;
            }

            int[] infected = new int[c];
            for (int i = 0; i < initial.Length; i++)
            {
                int color = colors[initial[i]];
                infected[color]++;
            }

            int answer = int.MaxValue;
            for (int i = 0; i < initial.Length; i++)
            {
                int color = colors[initial[i]];
                if (infected[color] == 1)
                {
                    if (answer == int.MaxValue)
                    {
                        answer = initial[i];
                    }
                    else if (groups[colors[answer]] < groups[color])
                    {
                        answer = initial[i];
                    }
                    else if (groups[colors[answer]] == groups[color] && initial[i] < answer)
                    {
                        answer = initial[i];
                    }

                }

            }

            if (answer == int.MaxValue)
            {
                for (int i = 0; i < initial.Length; i++)
                {
                    answer = Math.Min(answer, initial[i]);
                }
            }

            return answer;
        }

        private void dfs(int[][] graph, int i, int c)
        {
            //base
            if (colors[i] != -1) return;

            //action
            colors[i] = c;
            for (int j = 0; j < n; j++)
            {
                if (graph[i][j] == 1)
                {
                    dfs(graph, j, c);
                }
            }

        }
    }
}


// Time Complexity : O(n^2)
// Space Complexity : O(n)
// Did this code successfully run on Leetcode : Yes
// Any problem you faced while coding this : No

// Your code here along with comments explaining your approach
// Keep track of 3 arrays - colors array where we color code connected nodes using dfs
// group array to keep track of frequency count for each color
// infNodes which keep track of no of infected nodes from each group

class Solution {
    int[] colors, group, infNodes;
    public int minMalwareSpread(int[][] graph, int[] initial) {
        int n= graph.length;
        colors = new int[n];
        Arrays.fill(colors,-1);
        int clr= 0;
        for(int i=0;i<n;i++){
            if(colors[i]==-1){
                dfs(graph,i,clr); clr++;
            }
        }
        group = new int[clr];
        infNodes = new int[clr];
        for(int i=0;i<n;i++){ group[colors[i]]++;}
        for(int i:initial){ infNodes[colors[i]]++;}
        int result = Integer.MAX_VALUE;
        for(int i:initial){
            if(infNodes[colors[i]]>1)
                continue;
            else if(infNodes[colors[i]]==1 && result==Integer.MAX_VALUE)
                result = i;
            else if(infNodes[colors[i]]==1 && (group[colors[i]]>group[colors[result]])) result=i;
            else if(infNodes[colors[i]]==1 && (group[colors[i]]==group[colors[result]])) result=Math.min(i,result);
        }
        if(result==Integer.MAX_VALUE) for(int i:initial) result = Math.min(i,result);
        return result;
    }
    private void dfs(int[][] graph, int i, int clr){
        if(colors[i]!=-1) return;
        colors[i] = clr;
        for(int j=0;j<graph.length;j++){
            if(graph[i][j]==1)
                dfs(graph,j,clr);
        }
    }
}
// Time Complexity : O(n^2) - coz dfs might run on all nodes
// Space Complexity : O(n) - coz every node can be connected to all nodes in worst case
// Did this code successfully run on Leetcode : Yes

import java.util.Arrays;

public class MinimizeMalwareSpread {

    int n;
    int[] colors;
    public int minMalwareSpread(int[][] graph, int[] initial) {
        //null case
        if(graph == null) return 0;
        n = graph.length;
        colors = new int[n];

        Arrays.fill(colors, -1); // track of visited nodes
        int cl = 0;

        for(int i = 0; i < n; i++){ //O(n^2) - coz dfs might run on all nodes
            if(colors[i] == -1){
                dfs(graph, i , cl);
                cl++;
            }
        }

        int[] groups = new int[cl];
        for(int node: colors){
            groups[node]++;
        }
        //count of affected servers in each group
        int[] initGroup = new int[cl];
        for(int node : initial){
            //get color of infected server
            int c = colors[node];
            initGroup[c]++;
        }

        int result = Integer.MAX_VALUE;
        for(int node : initial){
            int c = colors[node];
            int k = initGroup[c];
            if(k == 1){
                if(result == Integer.MAX_VALUE){
                    result = node;
                }else if(groups[colors[result]] < groups[c]){
                    result = node;
                }else if(groups[colors[result]] == groups[c] && node < result){
                    result = node;
                }
            }
        }
        if(result == Integer.MAX_VALUE){
            for(int node : initial){
                result = Math.min(result, node);
            }
        }
        return result;
    }

    private void dfs(int[][] graph, int node, int cl){
        //base
        if(colors[node] != -1) return;
        //logic
        colors[node] = cl;
        //iterate over its connections
        for(int j = 0; j < n; j++){
            if(node != j && graph[node][j] == 1){
                dfs(graph, j, cl);
            }
        }
    }
}

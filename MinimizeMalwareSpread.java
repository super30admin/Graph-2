// Time Complexity: O(E+V)
// Space Complexity: O(V) / O(n)
public class MinimizeMalwareSpread {
    int colors[];
    int n;
    public int minMalwareSpread(int[][] graph, int[] initial) {
        if(graph == null || graph.length == 0)
            return 0;
        n = graph.length;// no of nodes
        colors = new int[n];
        int cl = 0; // starting color of grouping
        
        Arrays.fill(colors, -1);
        
        // color the groph using DFS
        for(int i = 0 ; i < n ; i ++)
        {
            if(colors[i] == -1)
            {
                dfs(i, graph, cl);
                // since we colored all connnected node change color 
                cl++;
            }
        }
        
        // find how many nodes in a group
        int[] groups = new int[cl];
        for(int i = 0 ; i < n; i ++)
        {
            int color = colors[i];
            groups[color]++;
        }
        
        // find the infected nodes for each color
        int infected[] = new int[cl];
        for(int i = 0 ; i < initial.length; i ++)
        {
            int color = colors[initial[i]];
            infected[color]++;
        }
        
        // find result
        int result = Integer.MAX_VALUE;
        for(int node : initial)
        {
            int color = colors[node];
            int totalInfected = infected[color];
            
            // since we need to only consider 1 infected
            if(totalInfected == 1)
            {
                if(result == Integer.MAX_VALUE)
                {
                    result = node;
                }
                // if size of current color more than previous color
                else if(groups[color] > groups[colors[result]])
                {
                    result = node;
                }
                // if size of current color is same as previous color but node number is smaller consider new 
                else if(groups[color] == groups[colors[result]] && node < result)
                {
                    result = node;
                }
            }
        }
        
        
         if (result == Integer.MAX_VALUE)
            for (int node: initial)
                result = Math.min(result, node);

        return result;
    }
    
    private void dfs(int i, int[][] graph, int color)
    {
        // base case
        if(colors[i] != -1)
            return;
        // color the current node
        colors[i] = color;
        
        for(int j = 0 ; j < graph[i].length; j ++)
        {
            if(graph[i][j] == 1) // connected to graph
            {
                dfs(j, graph, color);
            }
        }
    }
}

"""
Time Complexity : O(N ^ 2) where N is the length of the graph
Space Complexity : O(N) where N is the length of the graph
Did this code successfully run on Leetcode : Yes
Any problem you faced while coding this : No
"""
class Solution:
    def minMalwareSpread(self, graph: List[List[int]], initial: List[int]) -> int:
        if len(initial)==0:
            return 0 
        n = len(graph)
        colors = [-1]*n
        color = 0

        def dfs(index,c):
            #base
            if colors[index] != -1:
                return 
            #logic
            colors[index]=c

            for j in range(n):
                if graph[index][j]==1:
                    dfs(j,c)

        for i in range(n):
            dfs(i,color)
            color+=1

        infected_count = [0]*color
        grp_count = [0]*color

        # Information on which node belongs to which color
        for i in range(0,n):
            grp_count[colors[i]]+=1 
        # infected nodes colors
        for j in initial:
            infected_count[colors[j]]+=1 


        result = float('inf')
        minnode = float('inf')
        for node in initial:
            ncolor = colors[node]
            total_inf = infected_count[ncolor]
            total = grp_count[ncolor]
            minnode = min(minnode,node)
            if total_inf == 1:
                if result == float('inf'):
                    result = node
                elif total > grp_count[colors[result]]:
                    result = node
                elif total == grp_count[colors[result]] and node < result:
                    result = node
        if result == float('inf'):
            return minnode
        return result
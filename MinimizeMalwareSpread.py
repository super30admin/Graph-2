class Solution:
    def minMalwareSpread(self, graph: List[List[int]], initial: List[int]) -> int:
        '''
        Practice the problem more
        Time Complexity: O(V^2)
        '''
        n = len(graph)
        colors = [-1 for i in range(0,len(graph))]
        c = 0 
        
        def dfs(i,c):
            colors[i] = c
            for j in range(0,len(graph)):
                if(graph[i][j]==1 and colors[j]==-1):
                    dfs(j,c)
        
        for i in range(0,n):
            if(colors[i]==-1):
                dfs(i,c)
                c+=1
        groups = [0 for i in range(0,c)]
        initial_group_size = [0 for i in range(0,c)]
        for i in colors:
            groups[i]+=1
        
        for i in initial:
            initial_group_size[colors[i]]+=1
        
        result = float("inf")
        
        for i in initial:
            size_of_group = initial_group_size[colors[i]]
            if(size_of_group==1):
                if(result==float("inf")):
                    result = i
                elif(groups[colors[result]]<groups[colors[i]]):
                    result = i
                elif(groups[colors[result]]==groups[colors[i]] and i<result):
                    result = i
            
        if(result==float("inf")):
            return min(initial)
        
        return result

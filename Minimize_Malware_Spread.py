# Time Complexity : O(N^2), where N is the number of nodes in the graph.
# Space Complexity : O(N), where N is the number of nodes. 
from typing import List

class Solution:
    def minMalwareSpread(self, graph: List[List[int]], initial: List[int]) -> int:
        n = len(graph)
        parent = list(range(n))
        rank = [0] * n
        size = [1] * n

        def find(x):
            if parent[x] != x:
                parent[x] = find(parent[x])
            return parent[x]

        def union(x, y):
            rootX, rootY = find(x), find(y)
            if rootX != rootY:
                if rank[rootX] < rank[rootY]:
                    parent[rootX] = rootY
                    size[rootY] += size[rootX]
                elif rank[rootX] > rank[rootY]:
                    parent[rootY] = rootX
                    size[rootX] += size[rootY]
                else:
                    parent[rootY] = rootX
                    size[rootX] += size[rootY]
                    rank[rootX] += 1

        for i in range(n):
            for j in range(i + 1, n):
                if graph[i][j] == 1:
                    union(i, j)

        count = [0] * n
        malware = [False] * n

        for node in initial:
            malware[node] = True

        for node in initial:
            root = find(node)
            count[root] += 1

        result = min(initial)
        max_size = -1

        for node in initial:
            root = find(node)
            if count[root] == 1:
                if size[root] > max_size:
                    result = node
                    max_size = size[root]

        return result

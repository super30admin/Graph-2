//TC - O(N^2)
//SC - O(N)

import java.util.*;

class Solution {
	int[] colors;
	int n;

	public int minMalwareSpread(int[][] graph, int[] initial) {
		n = graph.length;
		colors = new int[n];
		Arrays.fill(colors, -1);
		int c = 0;
		for (int i = 0; i < n; i++) {
			dfs(i, graph, c);
			c++;
		}
		int[] groups = new int[c];
		for (int node : colors) {
			groups[node]++;
		}
		int[] initGroups = new int[c];
		for (int node : initial) {
			initGroups[colors[node]]++;
		}
		int result = Integer.MAX_VALUE;
		for (int node : initial) {
			int cl = colors[node];
			int cnt = initGroups[cl];
			if (cnt == 1) {
				if (result == Integer.MAX_VALUE) {
					result = node;
				} else if (groups[colors[result]] < groups[colors[node]]) {
					result = node;
				} else if (groups[colors[result]] == groups[colors[node]] && node < result) {
					result = node;
				}
			}
		}
		if (result == Integer.MAX_VALUE) {
			for (int node : initial) {
				result = Math.min(result, node);
			}
		}
		return result;
	}

	private void dfs(int node, int[][] graph, int c) {
		// base
		if (colors[node] != -1)
			return;
		// logic
		colors[node] = c;
		for (int j = 0; j < n; j++) {
			if (graph[node][j] == 1) {
				dfs(j, graph, c);
			}
		}
	}
}
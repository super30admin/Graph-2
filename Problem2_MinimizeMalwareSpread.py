# Time Complexity: O(n^2), where n - num of nodes
# Space Complexity: O(n)

class Solution:
    def minMalwareSpread(self, graph: List[List[int]], initial: List[int]) -> int:
        if not graph or len(graph) == 0:
            return 0

        n = len(graph)

        # Assign a color for every list of connected nodes
        colors = [-1 for x in range(n)]
        color = 0
        for i in range(n):
            if colors[i] == -1:  # not visited
                self.dfs(graph, colors, color, n, i)
                color += 1

        # Store num of nodes in each color
        groups = [0 for x in range(color)]
        for i in range(n):
            groups[colors[i]] += 1

        # Store the num of infected nodes in each color
        infected = [0 for x in range(color)]
        for node in initial:
            infected[colors[node]] += 1

        result = float('inf')
        for node in initial:
            # color of infected node
            col = colors[node]

            # If there is only one infected node in that color
            total = infected[col]
            if total == 1:
                # If result hasn't been found
                if result == float('inf'):
                    result = node

                # If num of nodes in curr node color is more than the num of nodes in the result node color
                elif groups[col] > groups[colors[result]]:
                    result = node

                # If there are same num of nodes in both colors, choose the lesser node value
                elif groups[col] == groups[colors[result]] and node < result:
                    result = node

        # If there is no color with 1 infected node
        if result == float('inf'):
            for node in initial:
                result = min(result, node)

        return result

    def dfs(self, graph:  List[List[int]], colors: List[int], color: int, n: int, node: int) -> None:
        # base - If node is already visited
        if colors[node] != -1:
            return

        # logic
        colors[node] = color
        for i in range(n):
            if graph[node][i] == 1:
                self.dfs(graph, colors, color, n, i)

# Time: O(n^2)
# Space: O(n) 
# Did it run on Leetcode: yes

class Solution(object):
    def minMalwareSpread(self, graph, initial):
        """
        :type graph: List[List[int]]
        :type initial: List[int]
        :rtype: int
        """
        def dfs(graph,i,cl):
            if(colors[i]!=-1):
                return
            colors[i]=cl
            for j in range(len(graph)):
                if(graph[i][j]==1):
                    dfs(graph,j,cl)
        n=len(graph)
        colors=[-1]* (n)
        cl=0
        for i in range(n):
            if(colors[i]==-1):
                dfs(graph,i,cl)
            cl+=1
        
        groups=[0]*(cl)
        initgroups=[0]*cl
        for c in colors:
            groups[c]+=1
        for node in initial:
            c=colors[node]
            initgroups[c]+=1
        res=float('inf')
        for node in initial:
            c=colors[node]
            if(initgroups[c]==1):
                if(res==float('inf')):
                    res=node
                elif(groups[c]>groups[colors[res]]):
                    res=node
                elif(groups[c]==groups[colors[res]] and node<res):
                    res=node
        if(res==float('inf')):
            for node in initial:
                res=min(res,node)
        return res
        
// couple of learnings from this problem : 
    // 1 . use union-find only when edges were given direclty 
    // 2 . use single array for grouping when given adjacency lists or adjacency matrix driectly 

// space complexity : O(n)
// time complexity : O(n*n)


import java.util.*;
class Solution {
    public int minMalwareSpread(int[][] graph, int[] initial) {
        Union(graph);
        HashMap<Integer, Integer> map = new HashMap<>();
        for(int i : initial){
            map.put(root[i], map.getOrDefault(root[i], 0) + 1);
        }
        Arrays.sort(initial);
        int result = initial[0];
        for(int malware : initial){
            if(map.get(root[malware]) != 1 ) continue;
            if(map.get(root[malware]) == map.get(root[result])){
                result = rank[root[malware]] > rank[root[result]] ? malware : result;
                System.out.println(root[malware]); 
            }
            else if(map.get(root[malware]) < map.get(root[result]))
                result = malware;
        }
        return result;

    }

    int[] root;
    int[] rank;
    private void Union(int[][] graph){
        int n = graph.length;
        root = new int[n];
        rank = new int[n];
        Arrays.fill(rank, 1);
        for(int i = 0 ; i<n ; i++)
            root[i] = i;
        
        for(int i = 0 ; i<n ; i++){
            for(int j = 0 ; j < n ; j++){
                if(graph[i][j] == 1 && i!=j)
                    union(i,j);
            }
        }
    }

    private void union(int node1 , int node2){
        node1 = find(node1);
        node2 = find(node2);

        if(rank[node1]>rank[node2]){
            root[node2] = node1;
            rank[node1]++;
        }
        else{
            root[node1] = node2;
            rank[node2]++;
        }
    }

    private int find(int node){
        if(root[node] != node)
            root[node] = find(root[node]);
        return root[node];
    }
}

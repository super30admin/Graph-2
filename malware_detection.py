# // Time Complexity :O(n2)
# // Space Complexity :O(n)
# // Did this code successfully run on Leetcode :yes
# // Any problem you faced while coding this :no


class Solution:
    def __init__(self):
            self.colors=[]
            self.n=0
        
    def minMalwareSpread(self, graph: List[List[int]], initial: List[int]) -> int:
        self.n=len(graph)
        self.colors=[-1 for i in range(self.n)]
        print(self.colors)
        cl=0
        for i in range(self.n):
            
            if self.colors[i]==-1:
                
                self.dfs(graph,i,cl)
                
                cl+=1
        print(self.colors)
        groups=[0 for i in range(cl)]
        for i in self.colors:
            groups[i]+=1
        print(groups)
        initgrp=[0 for i in range(cl)]
        for i in initial:
            c=self.colors[i]
            initgrp[c]+=1
        print(initgrp)
        result=inf
        for i in initial:
            t=self.colors[i]
            infected=initgrp[t]
            if infected==1:
                if result==inf:
                    result=i
                elif groups[t]>groups[self.colors[result]]:
                    result=i
                elif groups[t]==groups[self.colors[result]] and i<result:
                    result=i
        if result==inf:
            return min(initial)
                    
                
        return result
            
            
                
    def dfs(self,graph,i,cl):
        #base
        if self.colors[i] != -1:
            return
        #logic
        self.colors[i]=cl
        print(self.colors)
        for j in range(self.n):
            
            if graph[i][j]==1:
                self.dfs(graph,j,cl)
        
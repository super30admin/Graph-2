// Time Complexity : O(n*n)
// Space Complexity : O(n) 
// Did this code successfully run on Leetcode : YES
// Any problem you faced while coding this : NO

// Your code here along with comments explaining your approach
class Solution {
    
    Set<Integer> s;
    int vis[] ;
    
    public int minMalwareSpread(int[][] graph, int[] initial) {
        
        Arrays.sort(initial);
        int n = graph.length;
        vis = new int[n];
        s = new HashSet();
        
        for(int i : initial) {
            s.add(i);
        }
        
        int len = 0;
        int ans = initial[0];
        for(int i : initial) {
            int clen = 0;
            if(vis[i]==0) {
                vis[i]=1;
                clen = dfs(graph, i, 1);
            }
            
            if(len<clen) {
                len = clen;
                ans = i;
            }
            
        }

        return ans;
        
    }
    
    int dfs(int g[][], int curr, int len) {
        
        for(int j = 0;j<g.length;j++) {
            if(g[curr][j]==1 && vis[j]==0 && j!=curr) {
                vis[j] = 1;
                if(s.contains(j)) {
                    len = Integer.MIN_VALUE;
                }
                len = dfs(g, j, len+1);
            }
        }
        
        return len;
    }
    

}

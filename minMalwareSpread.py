class Solution:
    '''
    Algorithm
    1. Find out the number of groups 
    2. Find how many servers or nodes lie in a group
    3. Based on the initial infected nodes, see how many lie
    in each group 
    4. Using the info in step 3 find out the 
    groups that hve only one infected node 
        - Case 1 : no group that has one infected node 
                return min of the initial infected array 
        - case 2 : More than one group having one infected node
                return the one that has the min index 
        - case 3 : only one group that has one infected node
                return the node that has one infected node
    Time Complexity: O(V^2)
    Space Complexity: O(V) 
    '''
    def minMalwareSpread(self, graph: List[List[int]], initial: List[int]) -> int:
        self.n = len(graph)
        self.colors = [-1] * self.n
        cl = 0
        for i in range(self.n):
            if self.colors[i] == -1:
                self.dfs(graph, i, cl)
                cl += 1
                
        groups = [0] * cl
        for color in self.colors:
            groups[color] += 1
        
        # how many nodes in particular group are infected
        initialGroups = [0] * cl
        for node in initial:
            initialGroups[self.colors[node]] += 1
         
        result = float('inf')
        for node in initial:
            if initialGroups[self.colors[node]] == 1:
                if result == float('inf'):
                    result = node
                elif groups[self.colors[result]] < groups[self.colors[node]]:
                    result = node
                elif groups[self.colors[result]] == groups[self.colors[node]] and node < result:
                    result = node
                    
        if result == float('inf'):
            result = min(initial)
        return result
            
            
                
    def dfs(self, graph, idx, cl):
        if self.colors[idx] != -1:
            return
        self.colors[idx] = cl
        for j in range(self.n):
            if graph[idx][j] == 1:
                self.dfs(graph, j, cl)

        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        

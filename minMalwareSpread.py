"""
Time complexity O(N^2)
Space complexity O(N)

"""

class Solution:
    def minMalwareSpread(self, graph: List[List[int]], initial: List[int]) -> int:
        self.n=len(graph)
        self.colour=[-1]*self.n
        currcolor=0
        res = float('inf')
        # give colour codes 0,1 etc to the nodes and its neighbours -Preprocessing
        for i in range(self.n):
            if(self.colour[i]==-1):
                self.dfs(i,graph,currcolor)
                currcolor+=1
        
        #group the colours and count them 
        groups = collections.Counter(self.colour)
        
        #init group denotes the colour of initial infected Nodes
        init_groups = [0 for _ in range(len(self.colour))]
        
        for node in initial:
            # Get color of node from colour list
            c = self.colour[node]
            # Increment count of color in init_groups
            init_groups[c] += 1
        
        
        for node in initial:
            c = self.colour[node]
            cnt=init_groups[c]
            if(cnt==1):
                # if first result is taken 
                if res == float('inf'):
                    res = node
                # if the number of nodes in the component  > current number of nodes in the component the prev result belongs to, update result
                elif groups[c] > groups[self.colour[res]]:
                    res = node
                # If the number of components are equal, break the tie by picking node with lesser value
                elif groups[c] == groups[self.colour[res]] and node < res:
                    res = node
            
        if res == float('inf'):
            res= min(initial)
        return res
    
    
    
    def dfs(self,node: int, graph, currcolor:int):
        #base
        #if colour is already asigned
        if(self.colour[node]!=-1):
            return
        
        #Logic
        #set the currcolour in the colours array and dfs on neighbours 
        self.colour[node]=currcolor
        for i in range(self.n):
            if graph[node][i]==1 and node!=i:
                self.dfs(i,graph,currcolor)
                
//Time - O(n*n)
//Space - O(n)

class Solution {
public:
    int minMalwareSpread(vector<vector<int>>& graph, vector<int>& initial) {
        int n = graph.size();
        vector<int> colors (n,-1);
        int color = 0;
        for(int i = 0;i<n;i++){
            if(colors[i] == -1){
                dfs(i,color,colors,graph);
                color++;
            }
        }
        vector<int> colorGroupCount (color,0);
       
        for(auto c:colors){
            colorGroupCount[c]++;
        }
        
        vector<int> infectedInGroupsCount (color,0);
        for(auto in:initial){
            infectedInGroupsCount[colors[in]]++;
        }

        int node = -1;
        int count = 0;
        for(int i = 0;i<initial.size();i++){
            if(infectedInGroupsCount[colors[initial[i]]] == 1){
                if(node == -1){
                    node = initial[i];
                }
                else if(colorGroupCount[colors[node]]<colorGroupCount[colors[initial[i]]]){
                    node = initial[i];
                }else if(colorGroupCount[colors[node]] == colorGroupCount[colors[initial[i]]] && initial[i]<node){
                    node = initial[i];
                }
            }
        }
        
        if(node == -1){
            node = initial[0];
            for(auto n:initial){
                node = min(n,node);
            }
        }
        
        return node;

    }
    
    void dfs(int node,int color, vector<int>& colors, vector<vector<int>>& graph){
        if(colors[node] != -1) return;
        
        colors[node] = color;
        
        for(int i = 0;i<graph.size();i++){
            if(graph[node][i] == 1){
                dfs(i,color,colors,graph);
            }
        }
        return;
    }
};
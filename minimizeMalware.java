// Time Complexity : O(N^2)
// Space Complexity : O(N)
// Did this code successfully run on Leetcode : Yes
// Any problem you faced while coding this : No


// Your code here along with comments explaining your approach
class Solution {
    int[] colors; 
    int n;
    public int minMalwareSpread(int[][] graph, int[] initial) {
        if (graph == null || graph.length ==0) {
            return 0;
        }
        int result = Integer.MAX_VALUE;
        n = graph.length;
        colors = new int[n];
        Arrays.fill(colors, -1);
        int color = 0;
        for (int i = 0; i<n; i++) {
            dfs(i, color, graph);
            color++;
        }


        for (int i = 0; i < colors.length; i++) {
            System.out.print("  " + colors[i]);
        }

        int[] groups = new int[color];
        for (int cl : colors) {
            groups[cl]++;
        }

        int[] inGroup = new int[color];
        for (int i : initial) {
           int cl = colors[i];
           inGroup[cl]++;
        }

        for(int node : initial){ 
            int cl = colors[node];
            int count = inGroup[cl]; 
            if(count == 1){
                if(result == Integer.MAX_VALUE) result = node;
                else if (groups[cl] > groups[colors[result]]) result = node;
                else if (groups[cl] == groups[colors[result]] && node < result) result = node;
            }
        }

        if( result == Integer.MAX_VALUE){
            for(int node : initial){
                result = Math.min(result, node);
            }
        }
        return result;
    }
    
    private void dfs(int node, int color, int[][] graph){
        if(colors[node] != -1) return;
        colors[node] = color;
        for(int i = 0; i < n; i++){
            if(graph[node][i] == 1){
                dfs(i, color, graph);
            }
        }
    }
}

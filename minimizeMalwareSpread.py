'''
Time Complexity: 0(n*n)
Space Complexity: 0(n)
Run On LeerCode: Yes
'''
class Solution:
    
    def __init__(self):
        self.colorList = None
        self.groups = None
        self.malwareCountInGroup = None
    
    def dfsTraversal(self,graph,idx,color):
        # base-case---its already color coded
        if self.colorList[idx] != -1:
            return
        
        # logic-case
        # 1. initialize with color
        self.colorList[idx] = color
        
        # 2. iterate the cols of index row
        for col in range(0,len(graph)):
            if graph[idx][col] == 1:
                self.dfsTraversal(graph,col,color)
            
    
    def minMalwareSpread(self, graph: List[List[int]], initial: List[int]) -> int:
        
        # initialize members count
        size = len(graph)
        
        # 1. initialize the colors-list
        self.colorList = [-1]*size
        
        '''fillup the colorsList--dfsTraversal'''
        color = 0 # initial color
        
        for i in range(0,size):
            if self.colorList[i] == -1:
                self.dfsTraversal(graph,i,color)
                color += 1
        '''filled-up colorList'''
        
        print('Color List is:\t',self.colorList)
        
        # 2. initialize the groups
        self.groups = [0]*color
        
        for i in range(0,len(self.colorList)):
            self.groups[self.colorList[i]] += 1
        
        print('Color Group is:\t',self.groups)
        
        # 3. intialize the malware nodes count associated with the groups
        self.malwareCountInGroup = [0]*color
        
        for malware in initial:
            idx = self.colorList[malware]
            self.malwareCountInGroup[idx] += 1
        
        print('Malware count in group is:\t',self.malwareCountInGroup)
        
        # 4. iterate the initial list
        
        # index to be cured
        cureIndex = float('inf')

        #   for each malware in initial array
        for malware in initial:

            #   if only one infected
            if (self.malwareCountInGroup[self.colorList[malware]] == 1):

                #   if this occurs first time
                if (cureIndex == float('inf')):
                    cureIndex = malware

                #  if current malware's group size is greater than existing malware's group size
                elif (self.groups[self.colorList[malware]] > self.groups[self.colorList[cureIndex]]):
                    cureIndex = malware

                #  if equal component sizes => malware with less index value
                elif (self.groups[self.colorList[malware]] == self.groups[self.colorList[cureIndex]]):
                    cureIndex = min(cureIndex, malware)
            # print("Cure Index is:\t",cureIndex)
        #   if no one infected node found => minimum node should be returned
        if (cureIndex == float('inf')):
            for node in initial:
                cureIndex = min(cureIndex, node)

        # return the index to be cured
        print("Minimize Malware spread is:\t",cureIndex)
        print('\n')
        return cureIndex
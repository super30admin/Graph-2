# Time Complexity : O(n^2)
# Space Complexity : O(n);
# Did this code successfully run on Leetcode : Yes
# Any problem you faced while coding this : No
#
#
import sys
from typing import List


class Solution:
    def helper(self, graph, row, group):
        # base
        if self.groups[row] != -1:
            return
        # logic
        self.groups[row] = group
        for i in range(len(graph[row])):
            if graph[row][i] == 1:
                self.helper(graph, i, group)

    def minMalwareSpread(self, graph: List[List[int]], initial: List[int]) -> int:
        self.groups = [-1] * len(graph)
        group = 0
        for i in range(len(graph)):
            if self.groups[i] == -1:
                self.helper(graph, i, group)
                group += 1
        count = [0] * group
        for i in self.groups:
            count[i] += 1
        infected_count = [0] * group
        for i in initial:
            infected_count[self.groups[i]] += 1
        result = [sys.maxsize, -sys.maxsize]
        for i in range(len(initial)):
            if infected_count[self.groups[initial[i]]] >= 2:
                continue
            if count[self.groups[initial[i]]] - 1 > result[1]:
                result = [i, count[self.groups[initial[i]]] - 1]
            elif count[self.groups[initial[i]]] - 1 == result[1] and initial[i] < initial[result[0]]:
                result = [i, count[self.groups[initial[i]]] - 1]
        return initial[result[0]] if result[0] != sys.maxsize else min(initial)


print(Solution().minMalwareSpread([[[1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1], [0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0],
                                    [0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0], [0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0],
                                    [1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0], [0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0],
                                    [0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0], [0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0],
                                    [0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0], [0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0],
                                    [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1]]], [7, 8, 6, 2, 3]))

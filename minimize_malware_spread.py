# Time Complexity: O(n2)
# Space Complexity: O(n)
import collections
from collections import defaultdict


class Solution:
    def dfs(self, graph, n, cl, colors):
        colors[n] = cl
        for nei, adj in enumerate(graph[n]):
            if adj and nei not in colors:
                self.dfs(graph, nei, cl, colors)

    def minMalwareSpread(self, graph, initial):

        n = len(graph)
        colors = defaultdict()
        count = 0

        for i in range(n):
            if i not in colors:
                self.dfs(graph, i, count, colors)
                count += 1

        size = collections.Counter(colors.values())

        color_count = collections.Counter()

        for n in initial:
            color_count[colors[n]] += 1

        result = float('inf')

        for n in initial:
            c = colors[n]
            if color_count[c] == 1:
                if result == float('inf'):
                    result = n
                elif size[c] > size[colors[result]]:
                    result = n
                elif size[c] == size[colors[result]] and n < result:
                    result = n

        return result if result < float('inf') else min(initial)




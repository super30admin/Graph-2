class Solution:
    def minMalwareSpread(self, graph: List[List[int]], initial: List[int]) -> int:
    
        ## T.C = O(n^2)
        ## S.C = O(n)
        
        n = len(graph)
        colors = [-1]*n
        color = [0]
        connected_node_components = []

        def dfs(graph, idx):
            colors[idx] = color[0]
            for j in range(n):
                if graph[idx][j] == 1 and colors[j] == -1:
                    dfs(graph, j)

        for i in range(n):
            if colors[i] == -1:
                dfs(graph, i)
                color[0] += 1

        ## total nodes connected in groups
        groups = [0]*color[0]
        for i in range(n):
            groups[colors[i]] += 1

        ## total infected nodes in each groups
        infected = [0]*color[0]
        for i in initial:
            infected[colors[i]] += 1

        ## derive answer
        answer = float('inf')
        for i in initial:
            col = colors[i]
            if infected[col] == 1:
                if answer == float('inf'):
                    answer = i
                elif groups[col] > groups[colors[answer]]:
                    answer = i
                elif groups[col] ==  groups[colors[answer]] and answer > i:
                    answer = i
        
        if answer == float('inf'):
            return min(initial)
        
        return answer

        # Test case explained in the class
        # [
        #     [1,0,0,0,0,0,0,0,0,0,1,0], 
        #     [0,1,1,1,1,0,1,0,1,0,0,0], 
        #     [0,1,1,1,1,0,1,0,1,0,0,0], 
        #     [0,1,1,1,1,0,1,0,1,0,0,0], 
        #     [0,1,1,1,1,0,1,0,1,0,0,0], 
        #     [0,0,0,0,0,1,0,1,0,1,0,1], 
        #     [0,1,1,1,1,0,1,0,1,0,0,0], 
        #     [0,0,0,0,0,1,0,1,0,1,0,1], 
        #     [0,1,1,1,1,0,1,0,1,0,0,0], 
        #     [0,0,0,0,0,1,0,1,0,1,0,1], 
        #     [1,0,0,0,0,0,0,0,0,0,1,0], 
        #     [0,0,0,0,0,1,0,1,0,1,0,1]
        # ]
        # [2,6,7,10]

        

/*
Time Complexity: O(N*N)
Space Complexity: O(N)
*/
class Solution {
    class UnionFind {
        public int[] parent, size;
        UnionFind(int n) {
            parent = new int[n];
            size = new int[n];
            for(int i = 0; i < n; i++) {
                parent[i] = i;
                size[i] = 1;
            }
        }
        public int find(int x) {
            return x == parent[x] ? x : x = find(parent[x]);
        }
        public void union(int x, int y) {
            int a = find(x), b = find(y);
            if(a != b) {
                if(size[a] < size[b]) {
                    parent[a] = b;
                    size[b] += size[a];
                } else {
                    parent[b] = a;
                    size[a] += size[b];
                }
            }
        }
    }
    public int minMalwareSpread(int[][] graph, int[] initial) {
        int n = graph.length, ans = initial[0], max = 0;
        UnionFind uf = new UnionFind(n);
        for(int i = 0; i < n; i++) {
            for(int j = i + 1; j < n; j++) {
                if(graph[i][j] == 1) uf.union(i, j);
            }
        }
        int[] count = new int[n];
        for(int u: initial) count[uf.find(u)]++;
        for(int u: initial) {
            int x = uf.find(u), m = count[x] == 1 ? uf.size[x] : 0;
            if(m > max || m == max && u < ans) {
                max = m;
                ans = u;
            }
        }
        return ans;
    }
}
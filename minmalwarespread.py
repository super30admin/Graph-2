class Solution:
    # find out the number of groups i.e connected componenets using dfs, then in each group find out number of effected nodes and total nodes indidvidually,then find out the node that saves max no of nodes when removed
    #TC-O(n^2),SC-O(n)
    colors = []
    def minMalwareSpread(self, graph: List[List[int]], initial: List[int]) -> int:
        # no of connected components
        def dfs(node,color):
            if colors[node]!=-1:
                return
            colors[node]=color
            for j in range(n):
                if graph[node][j]==1:
                    dfs(j,color)
        n = len(graph)
        colors = [-1 for i in range(n)]
        c = 0 # current group number
        for i in range(n):
            if(colors[i]==-1):
                dfs(i,c)
            c+=1
        groups = [0 for i in range(c)]
        # finding no of nodes in each group
        for i in range(n):
            groups[colors[i]]+=1
        initgroup=[0 for i in range(c)]
        for node in initial:
            cl = colors[node]
            initgroup[cl]+=1
        res= float('inf')
        maxi = 0
        for node in initial:
            cl = colors[node]
            if initgroup[cl]==1:
                if res==float('inf'):
                    res=node
                elif (groups[colors[res]]< groups[colors[node]]):
                    res=node
                elif (groups[colors[res]]== groups[colors[node]] and node < res):
                    res=node
        if res==float('inf'):
            for node in initial:
                res=min(res,node)
        return res
    


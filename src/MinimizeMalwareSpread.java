// Time Complexity:  O(n^2)
// Space Complexity: O(n)

class Solution {

    int[] colors;
    
    public int minMalwareSpread(int[][] graph, int[] initial) {
        
        if(graph == null) 
            return -1;
        int n = graph.length;
        colors = new int[n];
        Arrays.fill(colors, -1);
        int cl = 0;
        
        // run dfs for unvisited colors
        for(int i=0; i<n; i++) {
            if(colors[i] == -1)
                dfs(graph, i, cl);
            cl++;
        }
        
        // groups
        int[] groups = new int[cl];
        for(int i=0; i<n; i++) {
            int color = colors[i];
            groups[color]++;
        }
        
        // initCount in respective groups
        int[] initCount = new int[cl];
        for(int i : initial) {
            int color = colors[i];
            initCount[color]++;
        }
        
        // check for less malware spread node
        int result = Integer.MAX_VALUE;
        for(int i : initial) {
            int color = colors[i];
            if(initCount[color] == 1) {
                if(result == Integer.MAX_VALUE) {                                     // first number
                    result = i;
                }
                else if(groups[color] > groups[colors[result]]) {                     // more impact
                    result = i;
                }
                else if(groups[color] == groups[colors[result]] && i < result) {      // same impact, lower number
                    result = i;
                }
            }
        }
        
        // if no node found suitable for less malware spread then take node with minimum value
        if(result == Integer.MAX_VALUE) {
            for(int i : initial) {
                result = Math.min(result, i);
            }
        }
        
        return result;
        
    }
    
    private void dfs(int[][] graph, int i, int color) {
        
        // base
        if(colors[i] != -1)
            return;
        
        // logic
        colors[i] = color;
        
        // neighbors
        for(int j=0; j<graph.length; j++) {
            if(graph[i][j] == 1)
                dfs(graph, j, color);
        }
        
    }
}
